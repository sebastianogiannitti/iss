System -trace rasp2025
mqttBroker "192.168.137.1" :  1883 eventTopic "ledalone/events"
//INDIRIZZO DA CAMBIARE CON MIO IP
//  "broker.hivemq.com" :  1883 eventTopic "ledalone/events"
//mqttBroker  "test.mosquitto.org" :1883 eventTopic "ledalone/events"
 
Dispatch turnOn  : turnOn(X)       
Dispatch turnOff : turnOff(X)    

Event ledchangedevent    : ledchangedevent( V ) 
Event ledstatelocalevent : ledstatelocalevent( V )
Event ledvaluestream     : ledvaluestream( V )
Event ledinfoevent       : ledinfoevent( V ) 

Context ctxrasp  ip [host="localhost" port=8080] 	 	 

/*
 * Il nome raspactor viene mantenuto costante al variare degli esempi
 * In tal modo il nome del main non cambia
 */
QActor raspactor context ctxrasp {     
[#   
   var state   = false  
#]    
	State s0 initial {  	
		delay 2000 //MQTT ...	
  		println("led started")
        [# machineExec("python ledPython25On.py")#] //infrastruttura qak
  		delay 1000
        [# machineExec("python ledPython25Off.py")#]
 	} 
 	Goto waitCmd        
	 
	State waitCmd{  
		println("led waits ...") 
	}   
	Transition t0     
 		whenMsg turnOn  -> turnLedOn
		whenMsg turnOff -> turnLedOff
   	  
   	//TUTTO QUELLO CHE IL LED PUO' COMUNICARE
	State  turnLedOn{  
		printCurrentMessage   
		[# Runtime.getRuntime().exec("python ledPython25On.py") #]
 		[# state = true 	#]
		emit ledchangedevent : ledchangedevent(on)				//A TUTTI gli actor del sistema
		//l'evento viene ascoltato solo se l'attore è in stato ricettivo, a differenza del dispatch
		//in cui il messaggio viene inserito nella coda
		//l'emit ha messo i messaggi nelle code degli attori
		//gli attori sono reattivi solo se sono in uno stato in cui sono percettivi rispetto all'evento
		
    	emitlocal ledstatelocalevent : ledstatelocalevent(on)   //SOLO agli attori del contesto
		emitlocalstream ledvaluestream : ledvaluestream(on)		//SOLO agli attori del contesto registrati
		//emitlocalstream lo manda solo a chi si è dichiarato interessato all'evento
		
		[# emitstreammqtt("ledout", "ledvaluestream","ledvaluestream(on)") #] //SOLO agli attori registrati su topic
		updateResource [# "ledreosurce($state)" #]              //SOLO CoAP client
		//sicccome ogni attore è una risorsa CoAP, con updateResurce gli invia informazione
		
		publish "ledout" -m ledinfoevent : ledinfoevent(on)     //SOLO MQTT subscribers su ledout
		//pubblico un'altra informazione, stavolta sulla topic ledout
		
		//QUESTO RENDE IL TUTTO OSSERVABILE (utile ad esempio in fase di testing)
 	}	  
	Goto waitCmd  
	      
	State  turnLedOff{  
 		printCurrentMessage   
        [# Runtime.getRuntime().exec("python ledPython25Off.py") #]
		[# state = false 		#]		 
		emit ledchangedevent : ledchangedevent(off)
		emitlocal ledstatelocalevent : ledstatelocalevent(off)
		emitlocalstream ledvaluestream : ledvaluestream(off)
		[# emitstreammqtt("ledout", "ledvaluestream","ledvaluestream(off)") #]
		updateResource [# "ledreosurce($state)"	#]
 		publish "ledout" -m ledinfoevent : ledinfoevent(off)
 	}	
	Goto waitCmd          
}


//ledobserver dallo stato iniziale va nello stato work, è interessato a tutti gli eventi
QActor ledobserver context ctxrasp{
	State s0 initial {  		
  		println("$name started")
	}	
	Goto work
	
	State work{
		
	}
	Transition t0
		whenEvent ledchangedevent     -> handleEvent
		whenEvent ledstatelocalevent  -> handleEvent
		whenEvent ledvaluestream      -> handleEvent //emitstreammqtt 
		whenEvent ledinfoevent        -> handleEvent
		
	State handleEvent{
		printCurrentMessage color blue
	}
	Goto work
}

QActor ledperceiver context ctxrasp{
	State s0 initial {  		
  		println("$name started")
	}	
	Goto work
	
	State work{
		
	}
	Transition t0
		whenEvent ledchangedevent     -> handleEvent
		whenEvent ledstatelocalevent  -> handleEvent
		whenEvent ledvaluestream      -> handleEvent
		whenEvent ledinfoevent        -> handleEvent
		
	State handleEvent{
		printCurrentMessage color green
	}
	Goto work
 }
 
//è un attore che è interessato all'evento ledvalue stream, emesso da raspactor
QActor ledreactor context ctxrasp{
	State s0 initial {  		
  		println("$name started")
  		subscribeTo raspactor for ledvaluestream
	}	
	Goto work
	
	State work{
		
	}
	Transition t0
		whenEvent ledchangedevent     -> handleEvent
		whenEvent ledstatelocalevent  -> handleEvent
		whenEvent ledvaluestream      -> handleEvent
		whenEvent ledinfoevent        -> handleEvent
		
	State handleEvent{
		printCurrentMessage color magenta
	}
	Goto work
 }

 
 /*
 
  */