/* Generated by AN DISI Unibo */ 
package it.unibo.raspactor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Raspactor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		   
		   var state   = false  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outblack("led started")
						 machineExec("python ledPython25On.py") 
						delay(1000) 
						 machineExec("python ledPython25Off.py") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						CommUtils.outblack("led waits ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="turnLedOn",cond=whenDispatch("turnOn"))
					transition(edgeName="t01",targetState="turnLedOff",cond=whenDispatch("turnOff"))
				}	 
				state("turnLedOn") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 Runtime.getRuntime().exec("python ledPython25On.py")  
						 state = true 	 
						emit("ledchangedevent", "ledchangedevent(on)" ) 
						emitlocal("ledstatelocalevent", "ledstatelocalevent(on)" ) 
						emitLocalStreamEvent("ledvaluestream", "ledvaluestream(on)" ) 
						 emitstreammqtt("ledout", "ledvaluestream","ledvaluestream(on)")  
						updateResourceRep( "ledreosurce($state)"  
						)
						//val m = MsgUtil.buildEvent(name, "ledinfoevent", "ledinfoevent(on)" ) 
						publish(MsgUtil.buildEvent(name,"ledinfoevent","ledinfoevent(on)").toString(), "ledout" )   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("turnLedOff") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 Runtime.getRuntime().exec("python ledPython25Off.py")  
						 state = false 		 
						emit("ledchangedevent", "ledchangedevent(off)" ) 
						emitlocal("ledstatelocalevent", "ledstatelocalevent(off)" ) 
						emitLocalStreamEvent("ledvaluestream", "ledvaluestream(off)" ) 
						 emitstreammqtt("ledout", "ledvaluestream","ledvaluestream(off)")  
						updateResourceRep( "ledreosurce($state)"	 
						)
						//val m = MsgUtil.buildEvent(name, "ledinfoevent", "ledinfoevent(off)" ) 
						publish(MsgUtil.buildEvent(name,"ledinfoevent","ledinfoevent(off)").toString(), "ledout" )   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
} 
